@page "/BlazorForms"

<h3>Blazor Forms</h3>

<div class="col-12 offset-md-2 col-md-8 border">
    <div class="text-center pt-4">
        <h2 class="text-success">Product Form</h2>
    </div>
    <div class="mx-2 px-2">
        <EditForm FormName="ProductCreate" Model="Product" OnValidSubmit="HandleProductCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-control py-2">
                Product Name
                <InputText class="form-control" @bind-Value="@Product.Name" />
                <ValidationMessage For="@(()=>Product.Name)" />
            </div>

            <div class="form-control py-2">
                Product Price
                <InputNumber class="form-control" @bind-Value="@Product.Price" />
                <ValidationMessage For="@(()=>Product.Price)" />
            </div>

            <div class="form-control py-2">
                Product Category
                <InputSelect class="form-select" @bind-Value="@Product.Category">
                    @foreach(var cat in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@cat">
                            @cat
                        </option>
                    }
                </InputSelect>
            </div>

            <div class="form-control py-2">
                Is Active
                <InputCheckbox @bind-Value="@Product.IsActive" />
            </div>

            <div class="form-control py-2">
                Product Price
                <InputDate class="form-control" @bind-Value="@Product.AvailableAfter" />
            </div>

            <button type="submit" class="btn btn-primary my-3" style="width: 200px;">Create Product</button>
            <p class="text-success">@(isProcessing ? "Processing" : "")</p>
            @if(createdProduct is not null)
            {
                <div class="mb-2">
                    <h2 class="text-success">Product Created</h2>
                    <div class="px-4">
                        Name: @createdProduct.Name <br />
                        Proce: @createdProduct.Price <br />
                        Category @createdProduct.Category <br />
                        Is Active @createdProduct.IsActive <br />
                        Available After: @createdProduct.AvailableAfter <br />
                    </div>
              </div>
            }
        </EditForm>

       @*  <EditForm FormName="ProductCreateTemp" Model="ProductTemp" OnValidSubmit="HandleProductCreateTemp">

        </EditForm> *@
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "ProductCreate")]
    public Product Product { get; set; } = new Product() {};

    // [SupplyParameterFromForm(FormName = "ProductCreateTemp")]
    // public Product ProductTemp { get; set; } = new Product() { };

    private bool isProcessing = false;

    private Product? createdProduct { get; set; }

    private async Task HandleProductCreate()
    {
        isProcessing = true;
        createdProduct = null;
        await Task.Delay(3000);
        createdProduct = Product;
        Product = new();
        isProcessing = false;
    }

    // private async Task HandleProductCreateTemp()
    // {
    //     isProcessing = true;
    //     createdProduct = null;
    //     await Task.Delay(3000);
    //     createdProduct = ProductTemp;
    //     Product = new();
    //     isProcessing = false;
    // }
}
